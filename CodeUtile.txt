//// MAIN.CPP -> CREATION PERSONNAGE, MONSTRE ET LEURS INTERACTIONS ENTRE EUX ////  
    
    /*
    Zombie z1;
    cout << "	zombie 1  " << endl;
	z1.setPv(20);
	z1.setAttack(6);
	z1.setNom("GRRRR");
	z1.showInfos();
	cout << endl;

    cout << "	zombie 2  " << endl;
	Zombie z2(z1);
	z2.setPv(40);
	z2.setAttack(3);
	z2.setNom("BRRRR");
	z2.showInfos();
	cout << endl;

    z2.attackZombie(&z1);

	cout << "Attack de z2 = "<<z2.getAttack()<<endl;
	cout << "PV de z1 = "<<z1.getPv()<<endl;
	cout << endl;

    ZombieBomber zb(10);
    zb.showInfos();
    cout << endl;

    ZombieFusion zf(20);
    zf.showInfos();
    cout << endl;

    ZombieMage zm(30);
    zm.showInfos();
    cout << endl;

    ZombieRapace zr(40);
    zr.showInfos();
    cout << endl;

    ZombieTank zt(50);
    zt.showInfos();
    cout << endl;
    */

//// INTERACTION BLESSANT PHYSIQUEMENT OU MENTALEMENT LE PERSONNAGE ////

/*
// ON DEFINI LA FONCTION santePhysique. On cible le Personnage attaqué et on initialise sa nouvelle santePhysique (avec pointeurs), en fonction de la difficulté de l'évènement survenu.
void Personnage::difficulteEvenement(Personnage* cible)
{
    cible->setSantePhysique(cible->getSantePhysique() - getDifficulte());
}
*/

//// INVENTAIRE ////  (pas le temp de tout écrir :'( )

                                main.cpp :

Item potionSoin ("heal",20);
Item potionBuff("Buff",10);
Item grenade("damage",40);
Personnage ennemy (potionSoin)
personnage.addItem (potionBuff);
while(enemy.getHelath() > 0 && player.getHealth > 0)
{
    cout<<player;
    cout<<ennemycout<< "que faire!"<<endl<<"1 l'attaquer?"<<endl<<"2 inventaire"<<endl;
    if(choice == 1)
    {
        player.attackEnnemy(ennemy);
    }else if{
        player.showinventaire();
        cout<< "quel item utiliser?"<<endl;
        //cin>>choice;
        player.useItem(ennemy,player.get)//(ennemy,choice);
    }if{
        ennemy.getHeal() <= 
    }
}




                                    Item.h :
#

bool heal
bool value
string type = "heal"

Item (string t,)

void Item::Item(Personnage &cible)
{
    if(type == "heal")
    {
        cible.setHealth(cible.getHealth()+value);
    }
    if(type == "damage")
    {
        cible.setHealth(cible.getHealth()-value);
    }
    if(type == "buff")
    {
        cible.setAttack(cible.getAttack()+value);
    }
}

void Item::showInfo()
{
    cout<<"type = "<<type<<endl;
    cout 
}



                                Item.cpp :

item::item(string t, int v):type(t),value(v){}

void::useItem
voi::showInfo


                                    Personnage.h :

include string
include vector

vector<item>inventaire
showInvetaire




                                Personnage.cpp :

void Personnage::showInventaire()
{
    for(Item i : inventaire)
    {

    }
}

void personnage::showInventaire(){
    for(Item i : inventaire)
    {
        i.showInfos();
    }
}

void personnage::addItem(item i)
{
    inventaire.push_back(i);
}

void personnage::useItem (personnage &cilbe, int item) //int index)
if (i.getType() == heal){
    setHealth(getHealth)+i.getValue();
}
else if (i.getType() == "damage"){
    cible.setHealth(cible.getHealth)-i.getValue();
}
else if (i.type() == "buff"){
        //cible.setHealth(cible.getHealth)-i.getValue();
}



                                    Personnage.h :

vod show Inventaire;
void addItem(Item i);
void useItem(Personnage &cible,Item & i);
